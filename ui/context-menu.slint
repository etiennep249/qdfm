import {FileItem, FileManager} from "filemanager.slint";
import {Theme} from "theme.slint";


export struct ContextItem {
    display: string,
    icon: image,
    shortcut: string,
    callback_id: int,
    has_separator: bool,
    click_on_hover: bool,
    internal_id: int, //Can be used for various internal purposes, does NOT affect UI
}
export global ContextAdapter {
    in-out property <length> x-pos;
    in-out property <length> y-pos;
    in-out property <[ContextItem]> items;
    in-out property <[ContextItem]> secondary-items;
    in-out property <length> secondary-x-pos;
    in-out property <length> secondary-y-pos;
    in property <int> current_hover_callback_id;
    in-out property <bool> is_secondary_visible: false;
    callback show_context_menu(length, length);
    callback menuitem_click(ContextItem);
    callback menuitem_hover(ContextItem);
}

export component ContextMenuItem inherits Rectangle {
    in property <length> menu_width;
    in property <bool> has_separator;
    in property <string> display;
    in property <image> icon;
    in property <string> shortcut;
    in property <bool> is_secondary: false;
    in property <ContextItem> context_item;
    height: Theme.current.context-menu-entry-height;
    width: menu_width - 2px - (Theme.current.context-menu-left-padding * 2);
    background: Theme.current.context-menu-background-color;

    touch := TouchArea {
        text := Text {
            overflow: elide;
            x: parent.x + 1px + Theme.current.context-menu-left-padding;
            width: parent.width - 2px - Theme.current.context-menu-left-padding;
            height: Theme.current.context-menu-entry-height;
            text: display;
            font-size: Theme.current.context-menu-font-size;
            color: Theme.current.context-menu-font-color;
            vertical-alignment: center;
            horizontal-alignment: left;
        }

        clicked => {
            ContextAdapter.menuitem_click(context_item);
        }
        changed has-hover => {
            if context_item.click-on-hover {
                ContextAdapter.menuitem_click(context_item);
            } else if !is_secondary {
                ContextAdapter.menuitem_hover(context_item);
            }
        }
    }

    separator := Rectangle {
        y: parent.height - 1px;
        height: 1px;
        background: has_separator ? Theme.current.context-menu-separator-color : Theme.current.context-menu-background-color;
    }

    states [
        hover when touch.has-hover: {
            background: Theme.current.context-menu-hover-color;
        }
    ]
}

export component ContextMenu inherits Rectangle {
    private property <length> menu_width: 200px;
    background: Theme.current.context-menu-background-color;
    border-color: Theme.current.context-menu-border-color;
    border-width: 1px;
    border-radius: 2px;
    width: menu_width;
    height: (Theme.current.context-menu-entry-height * ContextAdapter.items.length) + (Theme.current.context-menu-top-padding * 2);
    x: ContextAdapter.x-pos;
    y: ContextAdapter.y-pos;

    for item[i] in ContextAdapter.items: ContextMenuItem {
        context_item: item;
        display: item.display;
        icon: item.icon;
        has_separator: item.has_separator;
        menu_width: menu_width;
        y: (i * Theme.current.context-menu-entry-height) + parent.border-width + Theme.current.context-menu-top-padding;
    }
}

export component SecondaryContextMenu inherits Rectangle {
    private property <length> menu_width: 200px;
    background: Theme.current.context-menu-background-color;
    border-color: Theme.current.context-menu-border-color;
    border-width: 1px;
    border-radius: 2px;
    width: menu_width;
    height: (Theme.current.context-menu-entry-height * ContextAdapter.secondary-items.length) + (Theme.current.context-menu-top-padding * 2);
    x: ContextAdapter.secondary-x-pos;
    y: ContextAdapter.secondary-y-pos;

    for item[i] in ContextAdapter.secondary-items: ContextMenuItem {
        context_item: item;
        display: item.display;
        icon: item.icon;
        has_separator: item.has_separator;
        menu_width: menu_width;
        is_secondary: true;
        y: (i * Theme.current.context-menu-entry-height) + parent.border-width + Theme.current.context-menu-top-padding;
    }
}
