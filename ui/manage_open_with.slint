import { StandardButton, Button, ListView } from "std-widgets.slint";
import { PropertiesItem } from "properties.slint";
import { Theme } from "theme.slint";

struct OpenWithMapping {
    name: string,
    cmd: string,
}

export global ManageOpenWithAdapter {
    callback ok(string);
    callback cancel();
    callback open_with(bool);
    callback set_default(string, string);
    callback add_mapping(OpenWithMapping);
    callback remove_mapping(int);
    in-out property <[OpenWithMapping]> mappings;
    in-out property <OpenWithMapping> default_mapping;
    in-out property <int> selected_mapping: 0;
    in property <string> extension: "?";
}

export component ManageOpenWithWindow inherits Window {
    height: 560px;
    width: 480px;
    in-out property <length> win_height <=> self.height;
    in-out property <length> win_width <=> self.width;

    title: "Manage Extension Mappings";

    TouchArea {
        z: 0;
        pointer-event(e) => {
            if e.kind == PointerEventKind.down && e.button == PointerEventButton.left {
                display.clear-focus();
                cmd.clear-focus();
            }
        }
    }

    title := Text {
        height: 30px;
        x: 10px;
        y: 15px;
        font-size: 14px;
        text: "Currently viewing mappings for ." + ManageOpenWithAdapter.extension + " files";
    }

    list := Rectangle {
        width: parent.width - 20px;
        x: 10px;
        y: title.height + 10px;
        height: 300px;
        border-color: white;
        border-radius: 6px;
        border-width: 1px;
        TouchArea {
            z: 1;
            pointer-event(e) => {
                if e.kind == PointerEventKind.down && e.button == PointerEventButton.left {
                    ManageOpenWithAdapter.selected_mapping = -1;
                    display.value = "";
                    cmd.value = "";
                    display.clear-focus();
                    cmd.clear-focus();
                }
            }
            ListView {
                height: parent.height - 20px;
                width: parent.width;
                y: 10px;
                for m[i] in ManageOpenWithAdapter.mappings: Rectangle {
                    in property <bool> is_default: m.name == ManageOpenWithAdapter.default_mapping.name;
                    background: i == ManageOpenWithAdapter.selected_mapping ? Theme.current.selected-file-color : transparent;
                    border-radius: 2px;
                    height: 30px;
                    width: parent.width - 20px;
                    x: parent.x + 10px;
                    TouchArea {
                        z: 2;
                        pointer-event(e) => {
                            if e.kind == PointerEventKind.down && e.button == PointerEventButton.left {
                                ManageOpenWithAdapter.selected_mapping = i;
                                display.value = ManageOpenWithAdapter.mappings[ManageOpenWithAdapter.selected_mapping].name;
                                cmd.value = ManageOpenWithAdapter.mappings[ManageOpenWithAdapter.selected_mapping].cmd;
                            }
                        }
                        Text {
                            x: 2px;
                            text: (is_default ? "(Default) " : "") + m.name;
                        }

                        Button {
                            enabled: !is_default;
                            x: parent.width - 10px - self.width;
                            height: parent.height - 2px;
                            text: "Set Default";
                            clicked => {
                                ManageOpenWithAdapter.selected_mapping = i;
                                ManageOpenWithAdapter.default_mapping.name = m.name;
                            }
                        }
                    }
                }
            }
        }
    }

    move_up_btn := Button {
        text: "↑ Add ↑";
        x: parent.width - self.width - 10px;
        y: list.y + list.height + 10px;

        clicked => {
            ManageOpenWithAdapter.add_mapping({ name: display.value, cmd: cmd.value });
            ManageOpenWithAdapter.selected_mapping = ManageOpenWithAdapter.mappings.length - 1;
            display.clear-focus();
            cmd.clear-focus();
        }
    }

    update_btn := Button {
        text: "↻ Update ↺";
        x: parent.width - self.width - move-up-btn.width - 20px;
        y: list.y + list.height + 10px;

        clicked => {
            ManageOpenWithAdapter.mappings[ManageOpenWithAdapter.selected_mapping] = { name: display.value, cmd: cmd.value };
            display.clear-focus();
            cmd.clear-focus();
        }
    }

    remove_btn := Button {
        text: "✘ Remove ✘";
        x: parent.width - self.width - move-up-btn.width - update-btn.width - 30px;
        y: list.y + list.height + 10px;
        clicked => {
            ManageOpenWithAdapter.remove_mapping(ManageOpenWithAdapter.selected_mapping);
            ManageOpenWithAdapter.selected_mapping = -1;
            display.value = "";
            cmd.value = "";
        }
    }

    detail := Rectangle {
        width: parent.width - 20px;
        x: 10px;
        y: list.height + list.y + move-up-btn.height + 20px;
        height: 100px;

        border-color: white;
        border-radius: 5px;
        border-width: 1px;
        VerticalLayout {
            y: 30px;
            height: parent.height;
            width: root.width * 0.9;
            alignment: LayoutAlignment.start;
            spacing: 45px;

            display := PropertiesItem {
                display_text: "Name";
                value: ManageOpenWithAdapter.mappings[ManageOpenWithAdapter.selected_mapping].name;
            }

            cmd := PropertiesItem {
                display_text: "Command";
                value: ManageOpenWithAdapter.mappings[ManageOpenWithAdapter.selected_mapping].cmd;
            }
        }
    }

    cancel_btn := StandardButton {
        kind: cancel;
        x: parent.width - self.width - 10px;
        y: parent.height - 45px;

        clicked => {
            ManageOpenWithAdapter.cancel();
        }
    }

    open_with_btn := Button {
        text: "Open With";
        x: parent.width - cancel-btn.width - self.width - 20px;
        y: parent.height - 45px;
        clicked => {
            ManageOpenWithAdapter.open_with(false);
        }
    }

    open_with_term_btn := Button {
        text: "Open With (Terminal)";
        x: parent.width - cancel-btn.width - open_with_btn.width - self.width - 30px;
        y: parent.height - 45px;
        clicked => {
            ManageOpenWithAdapter.open_with(true);
        }
    }

    ok_btn := Button {
        text: "Save";
        x: parent.width - cancel-btn.width - open_with_btn.width - open-with-term-btn.width - self.width - 40px;
        y: parent.height - 45px;
        clicked => {
            ManageOpenWithAdapter.ok(ManageOpenWithAdapter.extension);
            ManageOpenWithAdapter.set_default(ManageOpenWithAdapter.extension, ManageOpenWithAdapter.default_mapping.name);
        }
    }
}
