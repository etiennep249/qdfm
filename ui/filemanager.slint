import { Theme } from "theme.slint";
import { _i64 } from "utils.slint";
import {Icons} from "icons.slint";
import {Header, ColumnHeadersAdapter} from "colheaders.slint";

export struct FileItem {
    path: string,
    file_name: string,
    is_dir: bool,
    size: _i64,
    date: _i64,
    file_type: string, 
    is_link: bool,
    extension: string,
}
//For current tab only
export global FileManager {
    in-out property <string> path;

    /*Allows higher performance when seleting single files*/
    /*DO NOT USE TO CHECK IF A FILE IS SELECTED, IT'S VISUAL ONLY AND MIGHT BE WRONG*/
    /*It may also use visual_selected even when it's a single selection.*/
    /*This index also corresponds to the last selected index in a multi selection*/
    in-out property <int> single_selected_index: -1;
    in-out property <bool> is_single_selected: false;

    in-out property <[FileItem]> files;
    in-out property <[bool]> visual_selected;
    callback fileitem_doubleclicked(FileItem, int);
    callback pressed();
    callback released();
    callback moved(float, float);
    pure callback format_size(_i64) -> string;
    pure callback format_date(_i64) -> string;
    callback is_index_selected(int) -> bool;
    callback add_to_selected(int, FileItem);
    callback remove_from_selected(int);
    callback reset_selected();
    callback set_single_selected(int, FileItem);
    callback is_nothing_selected() -> bool;
    callback shift_select(int);
}

export component NameWithIcon inherits Rectangle {
    in property <Header> header;
    in property <FileItem> file;
    in property <length> rowh;
    in property <bool> is_link;
    private property <length> spacing: 2px;
    icon := Image {
        x: parent.x;
        source: file.is-dir ? Icons.folder : Icons.file;
        colorize: file.is-dir ? Theme.current.folder-icon-color : Theme.current.file-icon-color;
        height: rowh;
        width: rowh;
    }

    Text {
        x: icon.width + spacing;
        overflow: elide;
        width: parent.width - icon.width - spacing;
        text: file.file-name;
        font-size: Theme.current.font-size-main;
        color: Theme.current.text-color-main;
        vertical-alignment: center;
        horizontal-alignment: header.alignment == 0 ? left : header.alignment == 1 ? center : right;
        font-italic: is_link;
    }
}

export component FileItemConditional inherits Rectangle {
    in property <Header> header;
    in property <FileItem> file;
    in property <length> rowh;
    if header.inner-value == 0: NameWithIcon {
        /*Name*/
        rowh: rowh;
        file: file;
        header: header;
        is_link: file.is-link;
    }
    if header.inner-value == 1: Text {
        /*Size*/
        overflow: elide;
        width: parent.width;
        visible: !file.is-dir;
        text: file.is-dir ? "" : FileManager.format_size(file.size);
        horizontal-alignment: header.alignment == 0 ? left : header.alignment == 1 ? center : right;
    }
    if header.inner-value == 2: Text {
        /*Date*/
        overflow: elide;
        width: parent.width;
        text: FileManager.format_date(file.date);
        horizontal-alignment: header.alignment == 0 ? left : header.alignment == 1 ? center : right;
    }
}

export component FileWidget inherits Rectangle {
    in property <FileItem> file;
    in property <int> self_index;
    private property <bool> selected: 
    FileManager.is_single_selected ? FileManager.single_selected_index == self_index : FileManager.visual_selected[self_index];
    callback context-menu(length, length);
    background: selected ? Theme.current.selected-file-color : transparent;
    border-radius: 2px;
    height: file.date.b == -1 ? 0 : 30px;
    private property <length> rowh: self.height;
    if file.date.b != -1: touch := TouchArea {
        HorizontalLayout {
            padding-left: 2px;
            padding-top: 2px;
            padding-bottom: 2px;
            padding-right: 2px;
            spacing: 12px;
            alignment: stretch;
            for header[i] in ColumnHeadersAdapter.headers: FileItemConditional {
                rowh: rowh;
                header: header;
                file: file;
                horizontal-stretch: header.width-pct / 1px;
            }
        }

        double-clicked => {
            FileManager.fileitem_doubleclicked(file, self_index);
        }

        moved => {
            FileManager.moved((self.absolute-position.x + self.mouse-x) / 1px, (self.absolute-position.y + self.mouse-y) / 1px);
        }

        pointer-event(e) => {
            if (e.button == PointerEventButton.right && e.kind == PointerEventKind.down) {
                //Right click
                //Pass absolute x and y for the context menu
                if FileManager.is_index_selected(self_index) {
                    root.context-menu(self.absolute-position.x + self.mouse-x, self.absolute-position.y + self.mouse-y);
                } else {
                    FileManager.set_single_selected(self_index, file);
                    root.context-menu(self.absolute-position.x + self.mouse-x, self.absolute-position.y + self.mouse-y);
                }
            } else if (e.button == PointerEventButton.left && e.kind == PointerEventKind.down) {
                if e.modifiers.control == true && !FileManager.is_index_selected(self_index) {
                    FileManager.add_to_selected(self_index, file);
                } else if e.modifiers.control == true && FileManager.is_index_selected(self_index) {
                    FileManager.remove_from_selected(self_index);
                } else if e.modifiers.shift == true && FileManager.is_nothing_selected() {
                    FileManager.add_to_selected(self_index, file);
                } else if e.modifiers.shift == true && FileManager.is_index_selected(self_index) {
                    FileManager.shift_select(self_index);
                } else if e.modifiers.shift == true && !FileManager.is_nothing_selected() {
                    FileManager.shift_select(self_index);
                } else if !FileManager.is_index_selected(self_index) {
                    FileManager.set_single_selected(self_index, file);
                } else if FileManager.is_index_selected(self_index) && !FileManager.is_single_selected {
                    FileManager.set_single_selected(self_index, file);
                }
                FileManager.pressed();
            } else if (e.button == PointerEventButton.left && e.kind == PointerEventKind.up) {
                FileManager.released();
            }
        }
    }
}
