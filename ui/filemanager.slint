import { Theme } from "theme.slint";
import { _i64 } from "utils.slint";
import {Icons} from "icons.slint";
import {Header, ColumnHeadersAdapter} from "colheaders.slint";

export struct FileItem {
    path: string,
    file_name: string,
    is_dir: bool,
    size: _i64,
    date: _i64,
}
//For current tab only
export global FileManager {
    in-out property <string> path;
    in-out property <[FileItem]> files; /*The actual files listed*/
    in-out property <int> selected_index: -1;
    callback fileitem_clicked(FileItem, int) -> bool;
    pure callback format_size(_i64) -> string;
    pure callback format_date(_i64) -> string;
}

export component NameWithIcon inherits Rectangle {
    in property <Header> header;
    in property <FileItem> file;
    in property <length> rowh;
    private property <length> spacing: 2px;
    icon := Image {
        x: parent.x;
        source: file.is-dir ? Icons.folder : Icons.file;
        colorize: file.is-dir ? Theme.current.folder-icon-color : Theme.current.file-icon-color;
        height: rowh;
        width: rowh;
    }
    Text {
        x: icon.width + spacing;
        overflow: elide;
        width: parent.width - icon.width - spacing;
        text: file.file-name;
        font-size: Theme.current.font-size-main;
        color: Theme.current.text-color-main;
        vertical-alignment: center;
        horizontal-alignment: header.alignment == 0 ? left : header.alignment == 1 ? center : right;
    }
}

export component FileItemConditional inherits Rectangle {
    in property <Header> header;
    in property <FileItem> file;
    in property <length> rowh;
    if header.inner-value == 0 : NameWithIcon { /*Name*/
        rowh: rowh;
        file: file;
        header: header;
    }
    if header.inner-value == 1 : Text { /*Size*/
        overflow: elide;
        width: parent.width;
        visible: !file.is-dir;
        text: FileManager.format_size(file.size);
        horizontal-alignment: header.alignment == 0 ? left : header.alignment == 1 ? center : right;
    }
    if header.inner-value == 2 : Text { /*Date*/
        overflow: elide;
        width: parent.width;
        text: FileManager.format_date(file.date);
        horizontal-alignment: header.alignment == 0 ? left : header.alignment == 1 ? center : right;
    }
}

export component FileWidget inherits Rectangle {
    in property <FileItem> file;
    in property <int> self_index;
    callback context-menu(length, length, FileItem);
    background: self-index == FileManager.selected-index ? Theme.current.selected-file-color : transparent;
    border-radius: 2px;
    height: file.date.b == -1 ? 0 : 30px;
    private property <length> rowh: self.height;
    if file.date.b != -1 : touch := TouchArea {
        HorizontalLayout {
            padding-left: 2px;
            padding-top: 2px;
            padding-bottom: 2px;
            padding-right: 2px;
            spacing: 12px;
            alignment: stretch;
            for header[i] in ColumnHeadersAdapter.headers : FileItemConditional {
                rowh: rowh;
                header: header;
                file: file;
                horizontal-stretch: header.width-pct/1px;
            }
        }
        clicked => {
            if (!FileManager.fileitem-clicked(file, self-index)) { 
                //If this wasn't a double click (aka if we don't change the path)
                FileManager.selected-index = self-index;
            }
            else {
                //Path changed, reset 
                FileManager.selected-index = -1;
            }
        }
        pointer-event(e) => {
            if (e.button == PointerEventButton.right && e.kind == PointerEventKind.down) { //Right click
                //Pass absolute x and y for the context menu
                root.context-menu(self.absolute-position.x + self.mouse-x, self.absolute-position.y + self.mouse-y, file);
            }
        }
    }
}
