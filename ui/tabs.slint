import {FileManager, FileWidget} from "filemanager.slint";
import { ScrollView , LineEdit} from "std-widgets.slint";
import { Theme } from "theme.slint";
import { Icons } from "icons.slint";
import { VSeparator } from "utils.slint";

export struct TabItem {
    text: string,
    internal_path: string,
    text_length: int,
    selected: bool,
}

export global TabsAdapter {
    in-out property <[TabItem]> tabs: [{text: "/", internal_path: "/", text_length: 1, selected: true}];
    in-out property <int> current_tab: 0;
    in-out property <[TabItem]> breadcrumbs;
    callback breadcrumb_clicked(TabItem);
    public function set_current_tab(item: TabItem) {
        tabs[current-tab] = item;
        FileManager.path = item.internal-path;
    }
    public function get_current_tab() -> TabItem{
        return tabs[current_tab];
    }
}

export component TabWidgetItem {
    in property <TabItem> tab;
    private property <length> fontsize: 14px;
    private property <length> h <=> self.height;
    min-width: 60px;
    Rectangle {
        background: tab.selected ? Theme.current.selected-tab-color : Theme.current.unselected-tab-color;
    }
    HorizontalLayout {
        padding-right: 3px;
        spacing: 8px;
        text := Text {
            text: tab.text;
            vertical-alignment: center;
            font-size: Theme.current.font-size-tabs;
            color: Theme.current.text-color-tabs;
        }
        Image {
            source: Icons.cross;
            colorize: Theme.current.red-color;
            height: h*0.7;
            width: h*0.7;
            y: Theme.current.main-padding-top + 1px;
        }
    }
    TouchArea {
        /*clicked => { }*/
    }
}

export component BreadcrumbItem {
    callback clicked <=> touch.clicked;
    in property <TabItem> tabItem;
    HorizontalLayout {
        slash := Text {
            text: "/";
            width: 15px;
            font-size: Theme.current.font-size-crumbs;
            vertical-alignment: center;
            horizontal-alignment: center;
            color: Theme.current.text-color-tabs;
        }
        rect := Rectangle {
            item := Text {
                text: tabItem.text;
                font-size: Theme.current.font-size-crumbs;
                vertical-alignment: center;
                color: Theme.current.text-color-tabs;
            }
            width: item.width;
            touch := TouchArea {}
        }
    }

    
}

export component PathAndCrumbs inherits Rectangle {
    height: Theme.current.breadcrumbs-height; 
    HorizontalLayout {
        for item[i] in TabsAdapter.breadcrumbs : BreadcrumbItem {
            clicked => {
                TabsAdapter.breadcrumb-clicked(item);
            }
            tabItem: item; 
        }
    }

    LineEdit {
        font-size: 14px;
        width: parent.width;
        height: parent.height;
        visible: false;
    }
    //Separator
    VSeparator {
        x: 0;
        y: parent.height;
        width: parent.width;
        color: Theme.current.separator-color;
    }
}


export component TabWidgetBody inherits Rectangle {
    background: Theme.current.background-color-main;
    VerticalLayout {
        PathAndCrumbs{
            max-width: Theme.width;
        }
        scrollview := ScrollView {
            VerticalLayout {
                alignment: start;
                spacing: 2px;
                for item[i] in FileManager.files : FileWidget {
                    clicked => {
                        FileManager.fileitem-clicked(item);
                    }
                    file: item;
                }
            }
        }
    }
}

export component TabWidget_ {
    in property <[TabItem]> tabs;
    in-out property <int> current_tab;    
    VerticalLayout {
        HorizontalLayout {
            height: Theme.current.tab-height;
            for item[i] in tabs : TabWidgetItem {
                tab: item;
            }
            tab_header_filler := Rectangle {
                background: Theme.current.background-color-tabs;
            }
        }
        TabWidgetBody {}
    }
        
}
