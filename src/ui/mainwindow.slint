import { StandardListView, ProgressIndicator, ScrollView} from "std-widgets.slint";

export struct SidebarItem {
    text: string,
    internal_path: string,
}

export global SidebarItems {
    in property <[SidebarItem]> drive_list: [];
    callback drive_clicked(SidebarItem);
}
export struct TabItem {
    text: string,
    internal_path: string,
    text_length: int,
}

export global TabsAdapter {
    in-out property <[TabItem]> tabs: [{text: "/", internal_path: "/", text_length: 1}];
    in-out property <int> current_tab: 0;
    public function change_current_tab(item: TabItem) {
        tabs[current-tab] = item;
    }
}

export component StorageIndicator inherits ProgressIndicator {
    in property <percent> pct: 0%;
    width: 100%;
    height: 10px;
    progress: pct;
}

export component DriveListItem {
    in property <string> text;
    callback clicked <=> touch.clicked;

    min-height: 30px;

    rect := Rectangle {
        border-radius: 4px;
        border-width: 1px;
        border-color: black;
    }
    HorizontalLayout {
        padding-left: 2px;
        padding-top: 2px;
        padding-bottom: 2px;
        padding-right: 2px;
        spacing: 5px;

        Text {
            horizontal-stretch: 1;
            font-size: 14px;
            text: text;
            vertical-alignment: center;
        }

        /*i-icon := Image {
            horizontal-stretch: 0;
            visible: false;
            source: Images.check;
            colorize: Theme.palette.lemon-green;
        }*/
        
    }
    touch := TouchArea {}
}

export component DriveList {
    in property <[SidebarItem]> model;
    in property <length> _width <=> self.width;

    scrollview := ScrollView {
        VerticalLayout {
            alignment: start;
            spacing: 2px;
            for item[i] in model : DriveListItem {
                clicked => {
                    SidebarItems.drive-clicked(item);
                }
                private property <length> offset: scrollview.viewport-y + i * (self.height + parent.spacing);
                text: item.text;
                animate opacity { duration: 50ms;  }
            }
        }
    }
}

export component TabWidgetItem {
    in property <TabItem> tab;
    private property <length> fontsize: 14px;
    width: 10px + (tab.text-length * fontsize);
    Rectangle {
        background: green;
    }
    Text {
        text: tab.text;
        font-size: fontsize;
    }

}
export component TabWidgetBody inherits Rectangle{
    background: blue;
}

export component TabWidget_ {
    in property <[TabItem]> tabs;
    in-out property <int> current_tab;    
    VerticalLayout {
        HorizontalLayout {
            height: 40px;
            for item[i] in tabs : TabWidgetItem {
                tab: item;
            }
            tab_header_filler := Rectangle {
                background: red;
            }
        }
        TabWidgetBody {
        }
    }
        
}

export component MainWindow {
    private property <length> sidebar_length: 200px;
    HorizontalLayout {
        padding-left: 10px;
        VerticalLayout{
            width: sidebar-length;
            Text {
                text: "Drives";
            }
            DriveList {
                _width: sidebar-length;
                model: SidebarItems.drive-list;
            }
        }
        TabWidget_ {
            tabs: TabsAdapter.tabs;
            current-tab: TabsAdapter.current-tab;
        }
    }
}
